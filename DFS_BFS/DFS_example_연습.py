
# 각 노드가 연결된 정보를 표현(2차원 리스트)
# 인접 리스트 방식으로 그래프를 표현: 그래프의 한 꼭짓점에서 연결되어 있는 꼭짓점들을 하나의 연결 리스트로 표현하는 방식
graph = [
    [], # 일반적으로 1번 노드부터 시작하는 경우가 많기 때문에 0번째 노드는 비워둔다.
    [2, 3, 8], # 1번 노드의 인접한 노드를 넣어줌
    [1, 7],
    [1, 4],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
    ]

# 방문 처리를 위하여 1차원 리스트
visited =[False] * 9 # 0~8번 노드를 모두 방문하지 않은 상태(False)로 초기화

# dfs는 그래프에 대한 정보(graph)와 방문 처리 여부가 기록된 하나의 리스트(visited)를 이용
def dfs(graph, v, visited):
    # 현재 방문한 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 확인하고 있는(스택의 최상단에 있는 원소) 노드와 연결된 다른 노드들을 하나씩 확인하면서 만약 그 노드가 방문처리 돼있지 않다면 그 노드에 대해서도 재귀함수를 이용해 방문을 진행
    for i in graph[v]:
        if not visited[i]:
            visited[i] = True
            dfs(graph, i, visited)
    # 이처럼 재귀적으로 방문하지 않은 노드들을 계속해서 방문한다는 점에서 깊이 우선으로 최대한 깊게 그래프를 탐색할 수 있는 것임.

dfs(graph, 1, visited)
