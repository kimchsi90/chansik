# 다이나믹 프로그래밍
# 피보나치 수열 바텀업(상향식) 방식으로 구현
# 아래쪽에서 작은 문제를 하나씩 해결해 나가면서 먼저 계산했던 문제들의 값을 활용해서 그 다음 문제까지 차례대로 해결한다는 점이 특징이며 반복문을 이용하여 구현

# 다이나믹 프로그래밍의 전형적인 형태는 바텀업 방식.

def fibo(n):
    # 바텀업 방식에서는 재귀 함수가 아니라 반복문이 사용되기 때문에 종료 조건 대신에 점화식의 시작 항들에 대한 값들을 먼저 초기화
    dp[1], dp[2] = 1, 1

    for i in range(3, n + 1): # 3번째부터 n번째까지
        # 점화식을 그대로 기입하여 각각의 항에 대한 값을 구해나감(작은 문제부터 해결해놓고 먼저 해결해 놓은 작은 문제들을 조합해서 앞으로의 큰 문제들을 해결해 나감)
        dp[i] = dp[i - 1] + dp[i - 2]

    return dp[n]


dp = [0] * 100
print(fibo(99))
